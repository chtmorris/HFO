//
// BenHeliView.swift
// Generated by Core Animator version 1.1.1 on 26/10/2015.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class BenHeliView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 72, height: 166))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)!
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:72, height:166)
		__scaling__.center = CGPoint(x:36.4, y:83.5)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let benBody = UIView()
		benBody.bounds = CGRect(x:0, y:0, width:95.7, height:160.9)
		benBody.layer.anchorPoint = CGPoint(x:0.681, y:0.498)
		benBody.layer.position = CGPoint(x:33.525, y:80.174)
		__scaling__.addSubview(benBody)
		viewsByName["benBody"] = benBody

		let benLeg = UIImageView()
		benLeg.bounds = CGRect(x:0, y:0, width:38.0, height:64.0)
		benLeg.layer.anchorPoint = CGPoint(x:0.501, y:0.137)
		var imgBenLeg: UIImage!
		if let imagePath = bundle.pathForResource("benLeg.png", ofType:nil) {
			imgBenLeg = UIImage(contentsOfFile:imagePath)
		}
		benLeg.image = imgBenLeg
		benLeg.contentMode = .Center;
		benLeg.layer.position = CGPoint(x:64.715, y:105.696)
		benLeg.transform = CGAffineTransformMakeRotation(0.296)
		benBody.addSubview(benLeg)
		viewsByName["benLeg"] = benLeg

		let benLeg2 = UIImageView()
		benLeg2.bounds = CGRect(x:0, y:0, width:38.0, height:64.0)
		benLeg2.layer.anchorPoint = CGPoint(x:0.501, y:0.137)
		benLeg2.image = imgBenLeg
		benLeg2.contentMode = .Center;
		benLeg2.layer.position = CGPoint(x:65.047, y:105.696)
		benLeg2.transform = CGAffineTransformMakeRotation(6.013)
		benBody.addSubview(benLeg2)
		viewsByName["benLeg 2"] = benLeg2

		let benHeadAndBody = UIImageView()
		benHeadAndBody.bounds = CGRect(x:0, y:0, width:54.0, height:102.0)
		benHeadAndBody.layer.anchorPoint = CGPoint(x:0.458, y:0.564)
		var imgBenHeadAndBody: UIImage!
		if let imagePath = bundle.pathForResource("benHeadAndBody.png", ofType:nil) {
			imgBenHeadAndBody = UIImage(contentsOfFile:imagePath)
		}
		benHeadAndBody.image = imgBenHeadAndBody
		benHeadAndBody.contentMode = .Center;
		benHeadAndBody.layer.position = CGPoint(x:66.430, y:63.625)
		benBody.addSubview(benHeadAndBody)
		viewsByName["benHeadAndBody"] = benHeadAndBody

		let endoscopeFly = UIImageView()
		endoscopeFly.bounds = CGRect(x:0, y:0, width:68.0, height:22.0)
		endoscopeFly.layer.anchorPoint = CGPoint(x:0.890, y:0.295)
		var imgEndoscopeFly: UIImage!
		if let imagePath = bundle.pathForResource("endoscopeFly.png", ofType:nil) {
			imgEndoscopeFly = UIImage(contentsOfFile:imagePath)
		}
		endoscopeFly.image = imgEndoscopeFly
		endoscopeFly.contentMode = .Center;
		endoscopeFly.layer.position = CGPoint(x:60.508, y:6.496)
		benBody.addSubview(endoscopeFly)
		viewsByName["endoscopeFly"] = endoscopeFly

		let armEndo = UIView()
		armEndo.bounds = CGRect(x:0, y:0, width:25.9, height:82.2)
		armEndo.layer.anchorPoint = CGPoint(x:0.385, y:0.039)
		armEndo.layer.position = CGPoint(x:59.588, y:65.308)
		benBody.addSubview(armEndo)
		viewsByName["armEndo"] = armEndo

		let endoscope = UIImageView()
		endoscope.bounds = CGRect(x:0, y:0, width:20.0, height:38.0)
		endoscope.layer.anchorPoint = CGPoint(x:0.530, y:0.042)
		var imgEndoscope: UIImage!
		if let imagePath = bundle.pathForResource("endoscope.png", ofType:nil) {
			imgEndoscope = UIImage(contentsOfFile:imagePath)
		}
		endoscope.image = imgEndoscope
		endoscope.contentMode = .Center;
		endoscope.layer.position = CGPoint(x:16.507, y:45.799)
		armEndo.addSubview(endoscope)
		viewsByName["endoscope"] = endoscope

		let benArm = UIImageView()
		benArm.bounds = CGRect(x:0, y:0, width:24.0, height:52.0)
		benArm.layer.anchorPoint = CGPoint(x:0.462, y:0.152)
		var imgBenArm: UIImage!
		if let imagePath = bundle.pathForResource("benArm.png", ofType:nil) {
			imgBenArm = UIImage(contentsOfFile:imagePath)
		}
		benArm.image = imgBenArm
		benArm.contentMode = .Center;
		benArm.layer.position = CGPoint(x:11.092, y:7.895)
		armEndo.addSubview(benArm)
		viewsByName["benArm"] = benArm

		self.viewsByName = viewsByName
	}

	// - MARK: benFalling

	func addBenFallingAnimation() {
		addBenFallingAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addBenFallingAnimation(completion: ((Bool) -> Void)?) {
		addBenFallingAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addBenFallingAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addBenFallingAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addBenFallingAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addBenFallingAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addBenFallingAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.250
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "BenFalling")
			self.animationCompletions[layer.animationForKey("BenFalling")!] = complete
		}

		let endoscopeRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		endoscopeRotationAnimation.duration = 0.250
		endoscopeRotationAnimation.values = [0.000 as Float, -0.591 as Float, 0.000 as Float]
		endoscopeRotationAnimation.keyTimes = [0.000 as Float, 0.480 as Float, 1.000 as Float]
		endoscopeRotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		endoscopeRotationAnimation.repeatCount = HUGE
		endoscopeRotationAnimation.beginTime = beginTime
		endoscopeRotationAnimation.fillMode = fillMode
		endoscopeRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["endoscope"]?.layer.addAnimation(endoscopeRotationAnimation, forKey:"benFalling_Rotation")

		let benBodyRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		benBodyRotationAnimation.duration = 0.250
		benBodyRotationAnimation.values = [-0.220 as Float, -0.220 as Float]
		benBodyRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		benBodyRotationAnimation.timingFunctions = [linearTiming]
		benBodyRotationAnimation.beginTime = beginTime
		benBodyRotationAnimation.fillMode = fillMode
		benBodyRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["benBody"]?.layer.addAnimation(benBodyRotationAnimation, forKey:"benFalling_Rotation")

		let benLeg2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		benLeg2RotationAnimation.duration = 0.250
		benLeg2RotationAnimation.values = [6.013 as Float, 6.606 as Float, 6.013 as Float]
		benLeg2RotationAnimation.keyTimes = [0.000 as Float, 0.480 as Float, 1.000 as Float]
		benLeg2RotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		benLeg2RotationAnimation.repeatCount = HUGE
		benLeg2RotationAnimation.beginTime = beginTime
		benLeg2RotationAnimation.fillMode = fillMode
		benLeg2RotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["benLeg 2"]?.layer.addAnimation(benLeg2RotationAnimation, forKey:"benFalling_Rotation")

		let armEndoRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		armEndoRotationAnimation.duration = 0.250
		armEndoRotationAnimation.values = [0.000 as Float, -0.273 as Float, 0.000 as Float]
		armEndoRotationAnimation.keyTimes = [0.000 as Float, 0.480 as Float, 1.000 as Float]
		armEndoRotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		armEndoRotationAnimation.repeatCount = HUGE
		armEndoRotationAnimation.beginTime = beginTime
		armEndoRotationAnimation.fillMode = fillMode
		armEndoRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["armEndo"]?.layer.addAnimation(armEndoRotationAnimation, forKey:"benFalling_Rotation")

		let benLegRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		benLegRotationAnimation.duration = 0.250
		benLegRotationAnimation.values = [0.296 as Float, -0.349 as Float, 0.296 as Float]
		benLegRotationAnimation.keyTimes = [0.000 as Float, 0.480 as Float, 1.000 as Float]
		benLegRotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		benLegRotationAnimation.repeatCount = HUGE
		benLegRotationAnimation.beginTime = beginTime
		benLegRotationAnimation.fillMode = fillMode
		benLegRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["benLeg"]?.layer.addAnimation(benLegRotationAnimation, forKey:"benFalling_Rotation")

		let endoscopeFlyOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		endoscopeFlyOpacityAnimation.duration = 0.250
		endoscopeFlyOpacityAnimation.values = [0.000 as Float, 0.000 as Float]
		endoscopeFlyOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		endoscopeFlyOpacityAnimation.timingFunctions = [linearTiming]
		endoscopeFlyOpacityAnimation.beginTime = beginTime
		endoscopeFlyOpacityAnimation.fillMode = fillMode
		endoscopeFlyOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["endoscopeFly"]?.layer.addAnimation(endoscopeFlyOpacityAnimation, forKey:"benFalling_Opacity")
	}

	func removeBenFallingAnimation() {
		self.layer.removeAnimationForKey("BenFalling")
		self.viewsByName["endoscope"]?.layer.removeAnimationForKey("benFalling_Rotation")
		self.viewsByName["benBody"]?.layer.removeAnimationForKey("benFalling_Rotation")
		self.viewsByName["benLeg 2"]?.layer.removeAnimationForKey("benFalling_Rotation")
		self.viewsByName["armEndo"]?.layer.removeAnimationForKey("benFalling_Rotation")
		self.viewsByName["benLeg"]?.layer.removeAnimationForKey("benFalling_Rotation")
		self.viewsByName["endoscopeFly"]?.layer.removeAnimationForKey("benFalling_Opacity")
	}

	// - MARK: benFlying

	func addBenFlyingAnimation() {
		addBenFlyingAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addBenFlyingAnimation(completion: ((Bool) -> Void)?) {
		addBenFlyingAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addBenFlyingAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addBenFlyingAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addBenFlyingAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addBenFlyingAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addBenFlyingAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "BenFlying")
			self.animationCompletions[layer.animationForKey("BenFlying")!] = complete
		}

		let endoscopeOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		endoscopeOpacityAnimation.duration = 0.500
		endoscopeOpacityAnimation.values = [0.000 as Float, 0.000 as Float]
		endoscopeOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		endoscopeOpacityAnimation.timingFunctions = [linearTiming]
		endoscopeOpacityAnimation.beginTime = beginTime
		endoscopeOpacityAnimation.fillMode = fillMode
		endoscopeOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["endoscope"]?.layer.addAnimation(endoscopeOpacityAnimation, forKey:"benFlying_Opacity")

		let benBodyRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		benBodyRotationAnimation.duration = 0.500
		benBodyRotationAnimation.values = [0.214 as Float, 0.214 as Float]
		benBodyRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		benBodyRotationAnimation.timingFunctions = [linearTiming]
		benBodyRotationAnimation.beginTime = beginTime
		benBodyRotationAnimation.fillMode = fillMode
		benBodyRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["benBody"]?.layer.addAnimation(benBodyRotationAnimation, forKey:"benFlying_Rotation")

		let benLeg2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		benLeg2RotationAnimation.duration = 0.500
		benLeg2RotationAnimation.values = [6.013 as Float, 6.621 as Float, 6.013 as Float]
		benLeg2RotationAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		benLeg2RotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		benLeg2RotationAnimation.repeatCount = HUGE
		benLeg2RotationAnimation.beginTime = beginTime
		benLeg2RotationAnimation.fillMode = fillMode
		benLeg2RotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["benLeg 2"]?.layer.addAnimation(benLeg2RotationAnimation, forKey:"benFlying_Rotation")

		let benArmRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		benArmRotationAnimation.duration = 0.500
		benArmRotationAnimation.values = [-2.959 as Float, -2.760 as Float, -2.959 as Float]
		benArmRotationAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		benArmRotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		benArmRotationAnimation.repeatCount = HUGE
		benArmRotationAnimation.beginTime = beginTime
		benArmRotationAnimation.fillMode = fillMode
		benArmRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["benArm"]?.layer.addAnimation(benArmRotationAnimation, forKey:"benFlying_Rotation")

		let benArmTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		benArmTranslationXAnimation.duration = 0.500
		benArmTranslationXAnimation.values = [-1.263 as Float, -1.263 as Float]
		benArmTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		benArmTranslationXAnimation.timingFunctions = [linearTiming]
		benArmTranslationXAnimation.beginTime = beginTime
		benArmTranslationXAnimation.fillMode = fillMode
		benArmTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["benArm"]?.layer.addAnimation(benArmTranslationXAnimation, forKey:"benFlying_TranslationX")

		let benArmTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		benArmTranslationYAnimation.duration = 0.500
		benArmTranslationYAnimation.values = [-11.953 as Float, -11.953 as Float]
		benArmTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		benArmTranslationYAnimation.timingFunctions = [linearTiming]
		benArmTranslationYAnimation.beginTime = beginTime
		benArmTranslationYAnimation.fillMode = fillMode
		benArmTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["benArm"]?.layer.addAnimation(benArmTranslationYAnimation, forKey:"benFlying_TranslationY")

		let benLegRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		benLegRotationAnimation.duration = 0.500
		benLegRotationAnimation.values = [0.296 as Float, -0.274 as Float, 0.296 as Float]
		benLegRotationAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		benLegRotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		benLegRotationAnimation.repeatCount = HUGE
		benLegRotationAnimation.beginTime = beginTime
		benLegRotationAnimation.fillMode = fillMode
		benLegRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["benLeg"]?.layer.addAnimation(benLegRotationAnimation, forKey:"benFlying_Rotation")

		let endoscopeFlyRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		endoscopeFlyRotationAnimation.duration = 0.150
		endoscopeFlyRotationAnimation.values = [0.000 as Float, 6.281 as Float]
		endoscopeFlyRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		endoscopeFlyRotationAnimation.timingFunctions = [easeInOutTiming]
		endoscopeFlyRotationAnimation.repeatCount = HUGE
		endoscopeFlyRotationAnimation.beginTime = beginTime
		endoscopeFlyRotationAnimation.fillMode = fillMode
		endoscopeFlyRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["endoscopeFly"]?.layer.addAnimation(endoscopeFlyRotationAnimation, forKey:"benFlying_Rotation")

		let endoscopeFlyTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		endoscopeFlyTranslationXAnimation.duration = 0.500
		endoscopeFlyTranslationXAnimation.values = [0.558 as Float, 0.558 as Float]
		endoscopeFlyTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		endoscopeFlyTranslationXAnimation.timingFunctions = [linearTiming]
		endoscopeFlyTranslationXAnimation.beginTime = beginTime
		endoscopeFlyTranslationXAnimation.fillMode = fillMode
		endoscopeFlyTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["endoscopeFly"]?.layer.addAnimation(endoscopeFlyTranslationXAnimation, forKey:"benFlying_TranslationX")

		let endoscopeFlyTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		endoscopeFlyTranslationYAnimation.duration = 0.500
		endoscopeFlyTranslationYAnimation.values = [10.402 as Float, 10.402 as Float]
		endoscopeFlyTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		endoscopeFlyTranslationYAnimation.timingFunctions = [linearTiming]
		endoscopeFlyTranslationYAnimation.beginTime = beginTime
		endoscopeFlyTranslationYAnimation.fillMode = fillMode
		endoscopeFlyTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["endoscopeFly"]?.layer.addAnimation(endoscopeFlyTranslationYAnimation, forKey:"benFlying_TranslationY")
	}

	func removeBenFlyingAnimation() {
		self.layer.removeAnimationForKey("BenFlying")
		self.viewsByName["endoscope"]?.layer.removeAnimationForKey("benFlying_Opacity")
		self.viewsByName["benBody"]?.layer.removeAnimationForKey("benFlying_Rotation")
		self.viewsByName["benLeg 2"]?.layer.removeAnimationForKey("benFlying_Rotation")
		self.viewsByName["benArm"]?.layer.removeAnimationForKey("benFlying_Rotation")
		self.viewsByName["benArm"]?.layer.removeAnimationForKey("benFlying_TranslationX")
		self.viewsByName["benArm"]?.layer.removeAnimationForKey("benFlying_TranslationY")
		self.viewsByName["benLeg"]?.layer.removeAnimationForKey("benFlying_Rotation")
		self.viewsByName["endoscopeFly"]?.layer.removeAnimationForKey("benFlying_Rotation")
		self.viewsByName["endoscopeFly"]?.layer.removeAnimationForKey("benFlying_TranslationX")
		self.viewsByName["endoscopeFly"]?.layer.removeAnimationForKey("benFlying_TranslationY")
	}

	// - MARK: benIntro

	func addBenIntroAnimation() {
		addBenIntroAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addBenIntroAnimation(completion: ((Bool) -> Void)?) {
		addBenIntroAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addBenIntroAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addBenIntroAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addBenIntroAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addBenIntroAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addBenIntroAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "BenIntro")
			self.animationCompletions[layer.animationForKey("BenIntro")!] = complete
		}

		let endoscopeFlyOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		endoscopeFlyOpacityAnimation.duration = 0.000
		endoscopeFlyOpacityAnimation.values = [0.000 as Float]
		endoscopeFlyOpacityAnimation.keyTimes = [0.000 as Float]
		endoscopeFlyOpacityAnimation.beginTime = beginTime
		endoscopeFlyOpacityAnimation.fillMode = fillMode
		endoscopeFlyOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["endoscopeFly"]?.layer.addAnimation(endoscopeFlyOpacityAnimation, forKey:"benIntro_Opacity")
	}

	func removeBenIntroAnimation() {
		self.layer.removeAnimationForKey("BenIntro")
		self.viewsByName["endoscopeFly"]?.layer.removeAnimationForKey("benIntro_Opacity")
	}

	override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("BenFalling")
		self.layer.removeAnimationForKey("BenFlying")
		self.layer.removeAnimationForKey("BenIntro")
	}
}